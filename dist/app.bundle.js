!function(e){var n=window.webpackHotUpdate;window.webpackHotUpdate=function(e,t){!function(e,n){if(!$[e]||!x[e])return;for(var t in x[e]=!1,n)Object.prototype.hasOwnProperty.call(n,t)&&(m[t]=n[t]);0==--v&&0===b&&k()}(e,t),n&&n(e,t)};var t,i=!0,o="23c84c68ce2391d99a6d",a=1e4,r={},s=[],l=[];function c(e){var n=E[e];if(!n)return I;var i=function(i){return n.hot.active?(E[i]?-1===E[i].parents.indexOf(e)&&E[i].parents.push(e):(s=[e],t=i),-1===n.children.indexOf(i)&&n.children.push(i)):(console.warn("[HMR] unexpected require("+i+") from disposed module "+e),s=[]),I(i)},o=function(e){return{configurable:!0,enumerable:!0,get:function(){return I[e]},set:function(n){I[e]=n}}};for(var a in I)Object.prototype.hasOwnProperty.call(I,a)&&"e"!==a&&"t"!==a&&Object.defineProperty(i,a,o(a));return i.e=function(e){return"ready"===u&&h("prepare"),b++,I.e(e).then(n,function(e){throw n(),e});function n(){b--,"prepare"===u&&(y[e]||j(e),0===b&&0===v&&k())}},i.t=function(e,n){return 1&n&&(e=i(e)),I.t(e,-2&n)},i}function d(e){var n={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:t!==e,active:!0,accept:function(e,t){if(void 0===e)n._selfAccepted=!0;else if("function"==typeof e)n._selfAccepted=e;else if("object"==typeof e)for(var i=0;i<e.length;i++)n._acceptedDependencies[e[i]]=t||function(){};else n._acceptedDependencies[e]=t||function(){}},decline:function(e){if(void 0===e)n._selfDeclined=!0;else if("object"==typeof e)for(var t=0;t<e.length;t++)n._declinedDependencies[e[t]]=!0;else n._declinedDependencies[e]=!0},dispose:function(e){n._disposeHandlers.push(e)},addDisposeHandler:function(e){n._disposeHandlers.push(e)},removeDisposeHandler:function(e){var t=n._disposeHandlers.indexOf(e);t>=0&&n._disposeHandlers.splice(t,1)},check:_,apply:O,status:function(e){if(!e)return u;p.push(e)},addStatusHandler:function(e){p.push(e)},removeStatusHandler:function(e){var n=p.indexOf(e);n>=0&&p.splice(n,1)},data:r[e]};return t=void 0,n}var p=[],u="idle";function h(e){u=e;for(var n=0;n<p.length;n++)p[n].call(null,e)}var f,m,g,v=0,b=0,y={},x={},$={};function w(e){return+e+""===e?+e:e}function _(e){if("idle"!==u)throw new Error("check() is only allowed in idle status");return i=e,h("check"),(n=a,n=n||1e4,new Promise(function(e,t){if("undefined"==typeof XMLHttpRequest)return t(new Error("No browser support"));try{var i=new XMLHttpRequest,a=I.p+""+o+".hot-update.json";i.open("GET",a,!0),i.timeout=n,i.send(null)}catch(e){return t(e)}i.onreadystatechange=function(){if(4===i.readyState)if(0===i.status)t(new Error("Manifest request to "+a+" timed out."));else if(404===i.status)e();else if(200!==i.status&&304!==i.status)t(new Error("Manifest request to "+a+" failed."));else{try{var n=JSON.parse(i.responseText)}catch(e){return void t(e)}e(n)}}})).then(function(e){if(!e)return h("idle"),null;x={},y={},$=e.c,g=e.h,h("prepare");var n=new Promise(function(e,n){f={resolve:e,reject:n}});m={};return j(0),"prepare"===u&&0===b&&0===v&&k(),n});var n}function j(e){$[e]?(x[e]=!0,v++,function(e){var n=document.createElement("script");n.charset="utf-8",n.src=I.p+""+e+"."+o+".hot-update.js",document.head.appendChild(n)}(e)):y[e]=!0}function k(){h("ready");var e=f;if(f=null,e)if(i)Promise.resolve().then(function(){return O(i)}).then(function(n){e.resolve(n)},function(n){e.reject(n)});else{var n=[];for(var t in m)Object.prototype.hasOwnProperty.call(m,t)&&n.push(w(t));e.resolve(n)}}function O(n){if("ready"!==u)throw new Error("apply() is only allowed in ready status");var t,i,a,l,c;function d(e){for(var n=[e],t={},i=n.slice().map(function(e){return{chain:[e],id:e}});i.length>0;){var o=i.pop(),a=o.id,r=o.chain;if((l=E[a])&&!l.hot._selfAccepted){if(l.hot._selfDeclined)return{type:"self-declined",chain:r,moduleId:a};if(l.hot._main)return{type:"unaccepted",chain:r,moduleId:a};for(var s=0;s<l.parents.length;s++){var c=l.parents[s],d=E[c];if(d){if(d.hot._declinedDependencies[a])return{type:"declined",chain:r.concat([c]),moduleId:a,parentId:c};-1===n.indexOf(c)&&(d.hot._acceptedDependencies[a]?(t[c]||(t[c]=[]),p(t[c],[a])):(delete t[c],n.push(c),i.push({chain:r.concat([c]),id:c})))}}}}return{type:"accepted",moduleId:e,outdatedModules:n,outdatedDependencies:t}}function p(e,n){for(var t=0;t<n.length;t++){var i=n[t];-1===e.indexOf(i)&&e.push(i)}}n=n||{};var f={},v=[],b={},y=function(){console.warn("[HMR] unexpected require("+_.moduleId+") to disposed module")};for(var x in m)if(Object.prototype.hasOwnProperty.call(m,x)){var _;c=w(x);var j=!1,k=!1,O=!1,D="";switch((_=m[x]?d(c):{type:"disposed",moduleId:x}).chain&&(D="\nUpdate propagation: "+_.chain.join(" -> ")),_.type){case"self-declined":n.onDeclined&&n.onDeclined(_),n.ignoreDeclined||(j=new Error("Aborted because of self decline: "+_.moduleId+D));break;case"declined":n.onDeclined&&n.onDeclined(_),n.ignoreDeclined||(j=new Error("Aborted because of declined dependency: "+_.moduleId+" in "+_.parentId+D));break;case"unaccepted":n.onUnaccepted&&n.onUnaccepted(_),n.ignoreUnaccepted||(j=new Error("Aborted because "+c+" is not accepted"+D));break;case"accepted":n.onAccepted&&n.onAccepted(_),k=!0;break;case"disposed":n.onDisposed&&n.onDisposed(_),O=!0;break;default:throw new Error("Unexception type "+_.type)}if(j)return h("abort"),Promise.reject(j);if(k)for(c in b[c]=m[c],p(v,_.outdatedModules),_.outdatedDependencies)Object.prototype.hasOwnProperty.call(_.outdatedDependencies,c)&&(f[c]||(f[c]=[]),p(f[c],_.outdatedDependencies[c]));O&&(p(v,[_.moduleId]),b[c]=y)}var S,T=[];for(i=0;i<v.length;i++)c=v[i],E[c]&&E[c].hot._selfAccepted&&T.push({module:c,errorHandler:E[c].hot._selfAccepted});h("dispose"),Object.keys($).forEach(function(e){!1===$[e]&&function(e){delete installedChunks[e]}(e)});for(var C,M,U=v.slice();U.length>0;)if(c=U.pop(),l=E[c]){var A={},P=l.hot._disposeHandlers;for(a=0;a<P.length;a++)(t=P[a])(A);for(r[c]=A,l.hot.active=!1,delete E[c],delete f[c],a=0;a<l.children.length;a++){var H=E[l.children[a]];H&&((S=H.parents.indexOf(c))>=0&&H.parents.splice(S,1))}}for(c in f)if(Object.prototype.hasOwnProperty.call(f,c)&&(l=E[c]))for(M=f[c],a=0;a<M.length;a++)C=M[a],(S=l.children.indexOf(C))>=0&&l.children.splice(S,1);for(c in h("apply"),o=g,b)Object.prototype.hasOwnProperty.call(b,c)&&(e[c]=b[c]);var L=null;for(c in f)if(Object.prototype.hasOwnProperty.call(f,c)&&(l=E[c])){M=f[c];var R=[];for(i=0;i<M.length;i++)if(C=M[i],t=l.hot._acceptedDependencies[C]){if(-1!==R.indexOf(t))continue;R.push(t)}for(i=0;i<R.length;i++){t=R[i];try{t(M)}catch(e){n.onErrored&&n.onErrored({type:"accept-errored",moduleId:c,dependencyId:M[i],error:e}),n.ignoreErrored||L||(L=e)}}}for(i=0;i<T.length;i++){var z=T[i];c=z.module,s=[c];try{I(c)}catch(e){if("function"==typeof z.errorHandler)try{z.errorHandler(e)}catch(t){n.onErrored&&n.onErrored({type:"self-accept-error-handler-errored",moduleId:c,error:t,originalError:e}),n.ignoreErrored||L||(L=t),L||(L=e)}else n.onErrored&&n.onErrored({type:"self-accept-errored",moduleId:c,error:e}),n.ignoreErrored||L||(L=e)}}return L?(h("fail"),Promise.reject(L)):(h("idle"),new Promise(function(e){e(v)}))}var E={};function I(n){if(E[n])return E[n].exports;var t=E[n]={i:n,l:!1,exports:{},hot:d(n),parents:(l=s,s=[],l),children:[]};return e[n].call(t.exports,t,t.exports,c(n)),t.l=!0,t.exports}I.m=e,I.c=E,I.d=function(e,n,t){I.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:t})},I.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},I.t=function(e,n){if(1&n&&(e=I(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(I.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var i in e)I.d(t,i,function(n){return e[n]}.bind(null,i));return t},I.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return I.d(n,"a",n),n},I.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},I.p="",I.h=function(){return o},c("./index.js")(I.s="./index.js")}({"../node_modules/css-loader/dist/cjs.js!./css/style.css":function(e,n,t){(e.exports=t("../node_modules/css-loader/dist/runtime/api.js")(!1)).push([e.i,'\n* {\n    margin:0;\n    padding:0;\n    box-sizing: border-box;\n}\n\na {\n    text-decoration: none;\n    color:#333;\n}\n\nul li {\n    list-style: none;\n}\n\nbody {\n    font-size: 12px;\n    line-height: 1.2;\n    background-color:#fff;\n    font-family: "Helvetica Neue",Helvetica,Roboto,Arial,sans-serif;\n}\n\nmain {\n    height: calc(100vh - 50px);\n    overflow:scroll;\n    -webkit-overflow-scrolling: touch;\n}\n\nmain > section {\n    padding:10px;\n    display: none;\n}\nmain > section:first-child {\n    display: block;\n}\n\n\n.item {\n    border-bottom: 1px solid #ccc;\n    padding-bottom:10px;\n    padding-top:10px;\n}\n\n.item>a {\n    display: block;\n    display: flex;\n}\n\n.item>a .cover, .item>a img {\n    width:70px;\n}\n\n.item .detail {\n    padding-left:10px;\n    flex:1;\n}\n\n.item .detail h2 {\n    font-size: 16px;\n}\n\n.item .detail .extra {\n    color:#999;\n    margin-top:4px;\n}\n\n.item .detail .score {\n    color:#ff5722;\n    /* margin-right:8px; */\n}\n\n.loading .iconfont {\n    display: inline-block;\n    font-size: 3em;\n    color:lightpink;\n    animation: 1s rotate linear infinite;\n\n}\n\n.loading {\n    padding:5px;\n    text-align: center;\n    display: none;\n}\n\n\nsection .search-area {\n    color: #333;\n    padding-bottom: 10px;\n    border-bottom: 1px solid #ccc;\n    position: relative;\n}\n\nsection .search-area input {\n    width: calc(100% - 50px);\n    padding: 8px;\n    background-color: #eee;\n    border: none;\n    border-radius: 2px;\n    box-shadow: none;\n    outline: none;\n}\n\nsection .search-area .button {\n    position: absolute;\n    right: 0;\n    padding: 8px 10px;\n    background: #FF5722;\n    color: #fff;\n    border-radius: 2px;\n    cursor: pointer;\n}\n\nsection #us {\n    position: relative;\n}\n\n/* section #us img {\n    width:80px;\n    margin: 2px;\n    position: absolute;\n}  */\n\n/* 添加评分 */\nsection #us .img-wrap {\n    width:80px;\n    margin: 2px;\n    display: inline-block;\n    position: absolute;\n}\n\nsection #us img {\n    width:80px;\n}  \nsection #us .score {\n    font-size: .9em;\n    font-weight: 300;\n    right: 2px;\n    bottom: 4px;\n    color: white;\n    position: absolute;\n    background: #ff5722;\n    border-radius: 50%;\n    opacity: .8;\n    padding: 4px;\n}\n\n/* 添加收藏 */\nsection .icon-xihuan {\n    position: absolute;\n    right: 10px;\n    top: 50%;\n    transform: translateY(-70%);\n    font-size: 2.1em;\n}\n\nsection .icon-xihuan.active {\n    color:red;\n}\n\nsection .no-data {\n    position: absolute;\n    font-size: 1.3em;\n    color: grey;\n    left: 50%;\n    top: 50%;\n    transform: translate(-50%,-250%);\n}\n\n/* 添加收藏结束 */\n\nsection .item .detail {\n    position: relative;\n}\n\n/* 添加评分 结束*/\n\n\n@keyframes rotate {\n    0% {\n        transform: rotate(0deg);\n    }\n    100% {\n        transform:rotate(360deg);\n    }\n}\n\nfooter {\n    height: 50px;\n    border-top:1px solid #ccc;\n    display: flex;\n    \n}\n\nfooter .active {\n    color:#ff5722;\n}\n\nfooter>div {\n    flex:1;\n    text-align: center;\n}\n\nfooter>div>span {\n    display: block;\n    padding-top:5px;\n}\n\n/* \n电影详情\n*/\n\n#detail {\n    background: rgba(0,0,0,0.4);\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    display: none;\n}\n\n#detail .movie_detail {\n    height: 100%;\n    /* margin: 30px 10px 0px 10px; */\n    background:white;\n    overflow: scroll;\n    -webkit-overflow-scrolling: touch;\n\n}\n\n#detail .card {\n    padding:0 18px;\n}\n\n#detail .subject {\n    display: flex;\n}\n\n#detail .left {\n    width: calc(100% - 100px);\n}\n\n#detail .right {\n    width: 100px;\n    height: 110px;\n    /* outline: 1px solid red; */\n}\n\n#detail .right img {\n    width:100px;\n}\n\n#detail .channel_tags{\n    margin-bottom: 30px\n    \n}\n\n#detail h2 {\n    color: #aaa;\n    margin: 0 0 15px;\n    font-size: 15px;\n}\n\n#detail h1,#detail h2,#detail h3 {\n    font-wight:normal;\n}\n\n\n\n \n\n#detail h1 {\n    padding-top: 20px;\n    padding-bottom: 5px;\n    font-weight: 400;\n    color: rgb(17,17,17);\n}\n\n#detail .score {\n    color:rgb(73,73,73);\n    margin-right:8px;\n}\n\n#detail .count {\n    color:rgb(170,170,170)\n}\n\n#detail .meta {\n    font-size: 14px;\n    color:rgb(73,73,73);\n    line-height: 22.4px;\n    padding-right: 20px;\n    margin-top: 10px;\n    margin-bottom: 30px;\n    \n}\n\n#detail .channel_tag {\n    background-color: #effaf0;\n    border: 1px solid #42bd56;\n    display: inline-block;\n    margin-right: 10px;\n    font-size: 13px;\n    padding: 5px 10px;\n    border-radius: 15px;\n    margin-bottom: 10px;\n}\n\n#detail a {\n  color:#42bd56   \n}\n\n#detail .bd {\n    font-size: 15px;\n    line-height: 22px;\n    color: #494949;\n    margin-bottom: 30px;\n    \n}\n\n#detail .celebrities ul {\n    overflow: auto;\n    white-space:nowrap;\n}\n\n#detail .celebrities li {\n    display: inline-block;\n    width: 75px;\n    margin-right:8px;\n}\n\n\n#detail .celebrities .poster {\n    width: 100%;\n    height: 130px;\n    background-size: cover;\n    background-position: center;\n    /* outline: 1px solid pink; */\n    \n}\n\n#detail .celebrities .name , #detail .celebrities .role {\n    margin-top:8px;\n    display: block;\n    text-align: center;\n}\n\n#detail .close {\n    margin:30px 0;\n    text-align: center;\n}\n\n#detail .close button {\n    color: #42bd56;\n    background-color: #effaf0;\n    border: 1px solid #42bd56;\n    font-size: 14px;\n    padding: 5px 16px;\n    border-radius: 15px;\n}\n\n\n\n\n\n',""])},"../node_modules/css-loader/dist/runtime/api.js":function(e,n,t){"use strict";e.exports=function(e){var n=[];return n.toString=function(){return this.map(function(n){var t=function(e,n){var t=e[1]||"",i=e[3];if(!i)return t;if(n&&"function"==typeof btoa){var o=(r=i,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(r))))+" */"),a=i.sources.map(function(e){return"/*# sourceURL="+i.sourceRoot+e+" */"});return[t].concat(a).concat([o]).join("\n")}var r;return[t].join("\n")}(n,e);return n[2]?"@media "+n[2]+"{"+t+"}":t}).join("")},n.i=function(e,t){"string"==typeof e&&(e=[[null,e,""]]);for(var i={},o=0;o<this.length;o++){var a=this[o][0];null!=a&&(i[a]=!0)}for(o=0;o<e.length;o++){var r=e[o];null!=r[0]&&i[r[0]]||(t&&!r[2]?r[2]=t:t&&(r[2]="("+r[2]+") and ("+t+")"),n.push(r))}},n}},"../node_modules/style-loader/lib/addStyles.js":function(e,n,t){var i,o,a={},r=(i=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=i.apply(this,arguments)),o}),s=function(e){var n={};return function(e,t){if("function"==typeof e)return e();if(void 0===n[e]){var i=function(e,n){return n?n.querySelector(e):document.querySelector(e)}.call(this,e,t);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(e){i=null}n[e]=i}return n[e]}}(),l=null,c=0,d=[],p=t("../node_modules/style-loader/lib/urls.js");function u(e,n){for(var t=0;t<e.length;t++){var i=e[t],o=a[i.id];if(o){o.refs++;for(var r=0;r<o.parts.length;r++)o.parts[r](i.parts[r]);for(;r<i.parts.length;r++)o.parts.push(b(i.parts[r],n))}else{var s=[];for(r=0;r<i.parts.length;r++)s.push(b(i.parts[r],n));a[i.id]={id:i.id,refs:1,parts:s}}}}function h(e,n){for(var t=[],i={},o=0;o<e.length;o++){var a=e[o],r=n.base?a[0]+n.base:a[0],s={css:a[1],media:a[2],sourceMap:a[3]};i[r]?i[r].parts.push(s):t.push(i[r]={id:r,parts:[s]})}return t}function f(e,n){var t=s(e.insertInto);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var i=d[d.length-1];if("top"===e.insertAt)i?i.nextSibling?t.insertBefore(n,i.nextSibling):t.appendChild(n):t.insertBefore(n,t.firstChild),d.push(n);else if("bottom"===e.insertAt)t.appendChild(n);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=s(e.insertAt.before,t);t.insertBefore(n,o)}}function m(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var n=d.indexOf(e);n>=0&&d.splice(n,1)}function g(e){var n=document.createElement("style");if(void 0===e.attrs.type&&(e.attrs.type="text/css"),void 0===e.attrs.nonce){var i=function(){0;return t.nc}();i&&(e.attrs.nonce=i)}return v(n,e.attrs),f(e,n),n}function v(e,n){Object.keys(n).forEach(function(t){e.setAttribute(t,n[t])})}function b(e,n){var t,i,o,a;if(n.transform&&e.css){if(!(a="function"==typeof n.transform?n.transform(e.css):n.transform.default(e.css)))return function(){};e.css=a}if(n.singleton){var r=c++;t=l||(l=g(n)),i=$.bind(null,t,r,!1),o=$.bind(null,t,r,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(t=function(e){var n=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",v(n,e.attrs),f(e,n),n}(n),i=function(e,n,t){var i=t.css,o=t.sourceMap,a=void 0===n.convertToAbsoluteUrls&&o;(n.convertToAbsoluteUrls||a)&&(i=p(i));o&&(i+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var r=new Blob([i],{type:"text/css"}),s=e.href;e.href=URL.createObjectURL(r),s&&URL.revokeObjectURL(s)}.bind(null,t,n),o=function(){m(t),t.href&&URL.revokeObjectURL(t.href)}):(t=g(n),i=function(e,n){var t=n.css,i=n.media;i&&e.setAttribute("media",i);if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}.bind(null,t),o=function(){m(t)});return i(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;i(e=n)}else o()}}e.exports=function(e,n){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(n=n||{}).attrs="object"==typeof n.attrs?n.attrs:{},n.singleton||"boolean"==typeof n.singleton||(n.singleton=r()),n.insertInto||(n.insertInto="head"),n.insertAt||(n.insertAt="bottom");var t=h(e,n);return u(t,n),function(e){for(var i=[],o=0;o<t.length;o++){var r=t[o];(s=a[r.id]).refs--,i.push(s)}e&&u(h(e,n),n);for(o=0;o<i.length;o++){var s;if(0===(s=i[o]).refs){for(var l=0;l<s.parts.length;l++)s.parts[l]();delete a[s.id]}}}};var y,x=(y=[],function(e,n){return y[e]=n,y.filter(Boolean).join("\n")});function $(e,n,t,i){var o=t?"":i.css;if(e.styleSheet)e.styleSheet.cssText=x(n,o);else{var a=document.createTextNode(o),r=e.childNodes;r[n]&&e.removeChild(r[n]),r.length?e.insertBefore(a,r[n]):e.appendChild(a)}}},"../node_modules/style-loader/lib/urls.js":function(e,n){e.exports=function(e){var n="undefined"!=typeof window&&window.location;if(!n)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var t=n.protocol+"//"+n.host,i=t+n.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,n){var o,a=n.trim().replace(/^"(.*)"$/,function(e,n){return n}).replace(/^'(.*)'$/,function(e,n){return n});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(a)?e:(o=0===a.indexOf("//")?a:0===a.indexOf("/")?t+a:i+a.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},"./css/style.css":function(e,n,t){var i=t("../node_modules/css-loader/dist/cjs.js!./css/style.css");"string"==typeof i&&(i=[[e.i,i,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0},a=t("../node_modules/style-loader/lib/addStyles.js")(i,o);i.locals&&(e.exports=i.locals),e.hot.accept("../node_modules/css-loader/dist/cjs.js!./css/style.css",function(){var n=t("../node_modules/css-loader/dist/cjs.js!./css/style.css");if("string"==typeof n&&(n=[[e.i,n,""]]),!function(e,n){var t,i=0;for(t in e){if(!n||e[t]!==n[t])return!1;i++}for(t in n)i--;return 0===i}(i.locals,n.locals))throw new Error("Aborting CSS HMR due to changed css-modules locals.");a(n)}),e.hot.dispose(function(){a()})},"./index.js":function(e,n,t){"use strict";t.r(n);t("./css/style.css");if(!!navigator.userAgent.match(/(iPad|iPhone|iPod)/g)){let e=$(window).height()-50;$("main").css({height:e}),console.log("IOS上main的height已重置")}let i={events:{},on(e,n){void 0===this.events[e]&&(this.events[e]=[]),this.events[e].push(n)},emit(e,n){this.events[e].forEach(e=>{e.call(null,n)})}};function o(e,n){let t="";null!==n&&JSON.parse(n).forEach(n=>{e.id===n.id+""&&(t="active")});let{casts:i,directors:o}=e,a=[],r=[];i.forEach(e=>{a.push(e.name)}),o.forEach(e=>{r.push(e.name)});let s=`            <div class="item" data-movie-id=${e.id}>\n    <a href="#">\n        <div class="cover">\n            <img src="http://img3.doubanio.com/f/movie/b6dc761f5e4cf04032faa969826986efbecd54bb/pics/movie/movie_default_small.png" data-src = "${e.images.small}" alt="">\n        </div>\n        <div class="detail">\n            <h2>${e.title}</h2>\n            <div class="extra">\n                <span class="score">${e.rating.average}</span> / ${e.collect_count}收藏\n            </div>\n            <div class="extra">${e.year} / ${e.genres.join("、")}</div>\n            <div class="extra">导演：${r.join("、")}</div>\n            <div class="extra">主演：${a.join("、")}</div>\n            <span class="iconfont icon-xihuan ${t}"></span>\n\n        </div>\n    </a>\n</div>\n`;return $(s)}function a(){$(".cover img").not("[data-isLoaded]").each(function(){$("main").height()+$("main").scrollTop()>$(this).offset().top&&($(this).attr("src",$(this).attr("data-src")),$(this).attr("data-isLoaded",1))})}new class{constructor({top250:e,us:n,search:t,fav:i,detail:o}){this.$tabs=$("footer>div"),this.panels=$("section"),this.top250=e,this.us=n,this.search=t,this.fav=i,this.detail=o}init(){this.bind(),this.top250.init(),this.us.init(),this.search.init(),this.fav.init(),this.detail.init()}bind(){let e=this;this.$tabs.click(function(){let n=$(this).index();e.panels.hide().eq(n).fadeIn(),$(this).addClass("active").siblings().removeClass("active"),"xihuan"===$(this).data("id")&&e.fav.render()})}}({top250:new class{constructor(){this.$container=$("#top250"),this.is_lodding=!1,this.moive_index=0,this.clock=null,this.lazy_load_time_id=null,this.event_hub=i,this.data=localStorage.getItem("douban_movies")}init(){this.bind(),this.start()}bind(){let e=this,n=this.$container.parents("main");n.scroll(()=>{"none"===this.$container.parent().css("display")||(this.clock&&clearTimeout(this.clock),this.clock=setTimeout(()=>{this.$container.height()-50<=n.height()+n.scrollTop()&&(console.log("滚动到底部，发起新的请求"),this.start())},300)),this.lazy_load_time_id&&clearTimeout(this.lazy_load_time_id),this.lazy_load_time_id=setTimeout(function(){a()},500)}),this.$container.on("click",".icon-xihuan",function(n){let t=$(this).parents(".item"),i=t.data("movieId");if($(this).hasClass("active"))$(this).removeClass("active"),e.event_hub.emit("unlike",i);else{$(this).addClass("active");let n=t.wrap("<p/>").parent().html();e.event_hub.emit("like",{id:i,html:n})}n.stopPropagation()}),this.event_hub.on("fav_unlike",function(n){e.$container.find(`[data-movie-id=${n}] .icon-xihuan`).removeClass("active")}),this.$container.on("click",":not('.icon-xihuan')",function(n){e.event_hub.emit("show_detail",$(this).parents(".item").data("movieId").toString()),n.stopPropagation()})}start(){this.getData(e=>{this.render(e)})}getData(e){this.is_lodding?console.log("lodding中，不重新请求数据"):(this.is_lodding=!0,this.$container.parent().find(".loading").show(),$.ajax({url:"//api.douban.com/v2/movie/top250",type:"GET",dataType:"jsonp",data:{start:this.moive_index,count:20}}).done(n=>{console.log("请求电影数据成功:"),e(n),this.moive_index+=20,console.log(n)}).fail(e=>{console.log("请求电影数据失败: "),console.log(e)}).always(()=>{this.is_lodding=!1,this.$container.parent().find(".loading").hide()}))}render(e){e.subjects.forEach(e=>{let n=o(e,this.data);this.$container.append(n)}),a()}},us:new class{constructor(){this.$container=$("#us"),this.col_height_arr=[],this.event_hub=i,this.img_width=$(".waterfall img").outerWidth(!0),this.col_Count=Math.floor($(".waterfall").width()/this.img_width);for(let e=0;e<this.col_Count;e++)this.col_height_arr[e]=0}init(){this.bind()}bind(){let e=this;this.$container.on("click",".img-wrap",function(){e.event_hub.emit("show_detail",$(this).data("movieId"))})}layout(e){}start(){this.getData(e=>{this.render(e)})}getData(e){$.ajax({url:"//api.douban.com/v2/movie/us_box",type:"GET",dataType:"jsonp"}).done(n=>{console.log("请求US电影数据成功:"),e(n),console.log(n)}).fail(e=>{console.log("请求电影数据失败: "),console.log(e)})}render(e){e.subjects.forEach(e=>{let n=o(e=e.subject);this.$container.append(n)})}},search:new class{constructor(){this.$element=$("#search"),this.$input=$("#search input"),this.$container=$(".search-reslut .container"),this.data=(()=>localStorage.getItem("douban_movies")),this.event_hub=i}init(){this.bind(),this.start(),this.keyword=null}bind(){let e=this;this.$container.on("click",".item",function(){e.event_hub.emit("show_detail",$(this).data("movieId"))}),this.$element.find(".button").click(()=>{this.keyword=this.$element.find("input").val(),this.$container.empty(),this.getData(e=>{this.render(e,this.data())})}),this.$container.on("click",".icon-xihuan",function(n){let t=$(this).parents(".item"),i=t.data("movieId");if($(this).hasClass("active"))console.log("收藏中...."),$(this).removeClass("active"),e.event_hub.emit("unlike",i);else{console.log("没有收藏..."),$(this).addClass("active");let n=t.wrap("<p/>").parent().html();e.event_hub.emit("like",{id:i,html:n})}n.stopPropagation()}),this.event_hub.on("fav_unlike",function(n){e.$container.find(`[data-movie-id=${n}] .icon-xihuan`).removeClass("active"),console.log("收藏页面取消收藏事件 成功")}),this.$input.on("keypress",function(n){let t=n.keyCode;e.keyword=$(this).val(),13===t&&(e.$container.empty(),e.getData(n=>{e.render(n,e.data())}))})}start(){}getData(e){this.is_lodding?console.log("lodding中，不重新请求数据"):(this.is_lodding=!0,this.$element.find(".loading").show(),$.ajax({url:"//api.douban.com/v2/movie/search",type:"GET",dataType:"jsonp",data:{q:this.keyword}}).done(n=>{console.log("搜索电影数据成功:"),e(n),console.log(n)}).fail(e=>{console.log("搜索电影数据失败: "),console.log(e)}).always(()=>{this.is_lodding=!1,this.$element.find(".loading").hide()}))}render(e,n){e.subjects.forEach(e=>{let t=o(e,n);this.$container.append(t)}),a()}},fav:new class{constructor(){this.$container=$("#fav"),this.local_storage=localStorage,this.data=this.local_storage.getItem("douban_movies"),this.event_hub=i}init(){console.log("初始化"),null===this.data?this.data=[]:this.data=JSON.parse(this.data),this.bind(),this.render()}bind(){let e=this;this.$container.on("click",".icon-xihuan",function(n){console.log("取消喜欢...");let t=$(this).parents(".item").data("movieId");e.remove_movie(t),e.event_hub.emit("fav_unlike",t),n.stopPropagation()}),this.$container.on("click",".item",function(){e.event_hub.emit("show_detail",$(this).data("movieId"))}),this.event_hub.on("like",function(n){console.log("我监听到了like事件..."),e.data.unshift(n),e.local_storage.setItem("douban_movies",JSON.stringify(e.data))}),this.event_hub.on("unlike",function(n){console.log("我监听到了unlike事件..."),e.remove_movie(n)})}remove_movie(e){let n=null;for(let[t,i]of this.data.entries())if(i.id===e){n=t;break}this.data.splice(n,1),this.local_storage.setItem("douban_movies",JSON.stringify(this.data)),this.render()}render(){this.$container.empty(),0===this.data.length?(console.log("\b\b暂无收藏..."),this.$container.append($('<span class="no-data">\b暂无收藏哦...</span>'))):this.data.forEach(e=>{this.$container.append($(e.html))})}},detail:new class{constructor(){this.$container=$("#detail"),this.$height=$(window).height(),this.event_hub=i,this.data=null}init(){this.bind()}bind(){this.$container.on("click",".close button",()=>{console.log("关闭详情页..."),this.$container.fadeOut()}),this.event_hub.on("show_detail",e=>{console.log(e);let n=`//api.douban.com/v2/movie/subject/${e}`;this.get_data(n,()=>{this.render()})})}get_data(e,n){let t=this;$.ajax({url:e,type:"GET",dataType:"jsonp",data:{apikey:"0b2bdeda43b5688921839c8ecb20399b"}}).done(e=>{console.log("请求电影\b详情数据成功."),t.data=e,t.render()}).fail(e=>{console.log("请求电影\b详情数据失败."),t.data=e})}render(){let e=this.data,n="",t="",i="";console.log(e),e.directors.map(e=>{console.log(e),n+=e.name+"(导演) / ",t+=`<li>\n                                    <div class="poster" style="\n                                    background-image: url('${e.avatars.small}')"></div>\n                                    <span class="name">${e.name}</span>\n                                    <span class="role">导演</span>\n                                </li>`}),e.casts.map(e=>{console.log(e),i+=e.name+" / ",t+=`<li>\n                                    <div class="poster" style="\n                                    background-image: url('${e.avatars.small}')"></div>\n                                    <span class="name">${e.name}</span>\n                                    <span class="role">演员</span>\n                                </li>`});let o=e.tags.map(e=>`<li class="channel_tag"><a href="">${e}</a></li>`),a=`${e.durations[0]+" / "+e.genres.join(" / ")+" / "+n+i+this.data.pubdates.join(" / ")}`,r=`\n        <div class="movie_detail" style="height:${this.$height}px">\n            <div class="card">\n                <h1>${e.title}</h1>\n                <div class="subject">\n                    <div class="left">\n                        <p class="ratting">\n                            <span class="star"></span>\n                            <strong class="score">${e.rating.average}</strong>\n                            <span class="count">${e.ratings_count}人评价</span>\n                        </p>\n                        <p class="meta">${a}\n                        </p>\n                    </div>\n                    <div class="right">\n                        <img src="${e.images.small}" alt="">\n                    </div>\n                </div>\n                <div class="channel_tags">\n                    <h2>所属频道</h2>\n                    <ul>\n                        ${o.join("")}\n                    </ul>\n                </div>\n                <div class="intro">\n                    <h2>${e.title}的剧情简介</h2>\n                    <p class="bd">\n                          ${e.summary}  \n                    </p>\n\n                </div>\n                <div class="celebrities">\n                    <h2>影人</h2>\n                    <ul>\n                        ${t}        \n                    </ul>\n                </div>\n            </div>\n            <div class="close">\n                <button>关闭</button>\n            </div>\n        </div>\n        `;this.$container.empty(),this.$container.append(r).fadeIn(),console.log("detail 渲染成功...")}}}).init();function r(e){let n=[70,80,90,120];e.subjects.forEach(e=>{let t=`\n         <div class="img-wrap" data-movie-id=${e.id}>\n            <img src="http://img3.doubanio.com/f/movie/b6dc761f5e4cf04032faa969826986efbecd54bb/pics/movie/movie_default_small.png"  data-src = "${e.images.small}" alt="">\n            <span class="score">${Number(e.rating.average).toFixed(1)}<span>\n         </div>\n         `,i=$(t);i.find("img").css("height",n[Math.floor(4*Math.random())]),$(".waterfall").append(i)}),function(){let e=[],n=$(".waterfall .img-wrap").outerWidth(!0),t=Math.floor($(".waterfall").width()/n);for(let n=0;n<t;n++)e[n]=0;console.log(`${e} ${n} ${t}`),$(".waterfall .img-wrap").each(function(){let t=Math.min(...e),i=e.indexOf(t);$(this).css({left:i*n,top:t}),e[i]+=$(this).outerHeight(!0)}),$(".waterfall img").not("[data-isLoaded]").each(function(){$("main").height()+$("main").scrollTop()>$(this).offset().top&&($(this).attr("src",$(this).attr("data-src")),$(this).attr("data-isLoaded",1))});let i=$(".waterfall .img-wrap").parents("section").outerWidth(!0),o=$(".waterfall .img-wrap").eq(0).outerWidth(!0)*t,a=Math.floor((i-o)/2);$(".waterfall .img-wrap").parents("section").css({"padding-left":a,"padding-top":a}),console.log(`padding-left is ${a}`)}()}$("footer>div").eq(1).click(()=>{0===$(".waterfall img").length&&function(e){$(".waterfall").parent().find(".loading").show(),$.ajax({url:"//api.douban.com/v2/movie/in_theaters",type:"GET",dataType:"jsonp"}).done(n=>{e(n),console.log(n)}).fail(e=>{console.log("请求电影数据失败: "),console.log(e)}).always(()=>{$(".waterfall").parent().find(".loading").hide()})}(r)})}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,